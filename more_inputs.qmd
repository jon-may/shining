---
title: "More Inputs"
---

Let's edit the app so that it creates another variable based on the values of x.

First add this function definition to the top of the file, before the **ui**

```         
makey<-function(x,w){w*x+rnorm(length(x),10,2)*(1-w)}
```

If you call this function with a vector of numbers x and a weight w, it will return a new vector that is $$ x.w + e $$ where e is random.

Add a line that calls this function to the data function:

```         
  data<-reactive({
      if(!is.null(input$file)){
         file<-input$file
         data<-read_csv(file$datapath)
         data<-data|>mutate(y=makey(x,.6))
      }
   })
```

Next, change the ggplot code by adding a *y* aesthetic and replacing **geom_dist()** with **geom_point()** so that it produces a scatterplot instead of a density plot.

```         
         data|>ggplot((aes(x=x, y=y)))+geom_point()+theme_minimal()
```

Try it out by clicking ![](images/run-app.png){width="86"}

It is quite boring, so lets specify the colour of the points, using a **radioButtons()** and their shape using **selectInput().** Edit the **sidebarPanel** to include these inputs.

```         
           radioButtons("colour","Point colour:",c("red","blue","green","yellow")),
           selectInput("shape","Point Shape:",choices = c(0:8))
```

To make these have an effect edit the **geom_point** in **output\$distPlot** that draws the scatterplot so that it becomes:

```         
         data|>ggplot((aes(x=x, y=y)))+
            geom_point(colour=input$colour,shape=as.numeric(input$shape))+
            theme_minimal()
```

Notice that because **selectInput()** provides a character string, we have to convert it to numeric for the shape to work (otherwise all the points will be little numbers).

Try it out by clicking ![](images/run-app.png){width="86"}

Finally, add an input to **sidebarPanel** that lets you define the weight instead of it being fixed at 0.6:

```         
         numericInput("w","Weight for X:", min=0, max=1, step=.05, value=.5)
```

and change the last line of the reactive data function:

```         
        data<-data|>mutate(y=makey(x,input$w))
```

![](images/fullapp.png)

In case you've got lost with all those brackets and commas, here is the complete code:

```         
library(shiny)
library(tidyverse)

makey<-function(x,w){w*x+rnorm(length(x),10,2)*(1-w)}

ui <- fluidPage(
   titlePanel("My random scatterplot"),
   sidebarLayout(
      sidebarPanel(
         fileInput("file","Data:"),
         radioButtons("colour","Point colour:",c("red","blue","green","yellow")),
         selectInput("shape","Point Shape:",choices = c(0:8)),
         numericInput("w","Weight for X:", min=0, max=1, step=.05, value=.5)
      ),
      mainPanel(
         textOutput("descriptives"),
         plotOutput("distPlot")
      )
   )
   )

server <- function(input, output) {
   
   data<-reactive({
      if(!is.null(input$file)){
         file<-input$file
         data<-read_csv(file$datapath)
         data<-data|>mutate(y=makey(x,input$w))
      }
   })
   
    output$distPlot <- renderPlot({
       if(!is.null(input$file)){
         data<-data()
         data|>ggplot((aes(x=x, y=y)))+
            geom_point(colour=input$colour,shape=as.numeric(input$shape))+
            theme_minimal()
       }
    })
    
    output$descriptives <- renderText({
       if(!is.null(input$file)){ 
          data<-data()
          paste("There are",nrow(data),
                "observations of X with a mean of",round(mean(data$x),1),
                "and a standard deviation of",round(sd(data$x),2)
          )
       }
    })
}

shinyApp(ui = ui, server = server)
```
